import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the interface for the UserState
export interface UserState {
  isLoggedIn: boolean;
  userId: string;
  userName: string;
  email: string;
  phoneNumber: number;
  firstName: string;
  lastName: string;
  address: string;
  avatar: string;
  coverImage: string;
  role: string;
  licence: string;
  visitFees: number;
  instituteName: string;
  accessToken: string | null;
}

// Define the initial state using that type
const initialState: UserState = {
  isLoggedIn: localStorage.getItem('accessToken') ? true : false,
  userId: '',
  userName: '',
  email: '',
  phoneNumber: 0,
  firstName: '',
  lastName: '',
  address: '',
  avatar: '',
  coverImage: '',
  role: '',
  licence: '',
  visitFees: 0,
  instituteName: '',
  accessToken: localStorage.getItem('accessToken') ? localStorage.getItem('accessToken') : '',
};

// Create the user slice
export const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    // Define a setUser action that takes a UserState as payload
    setUser: (state, action: PayloadAction<UserState>) => {
      state.isLoggedIn = action.payload.isLoggedIn;
      state.userId = action.payload.userId;
      state.userName = action.payload.userName;
      state.email = action.payload.email;
      state.phoneNumber = action.payload.phoneNumber;
      state.firstName = action.payload.firstName;
      state.lastName = action.payload.lastName;
      state.address = action.payload.address;
      state.avatar = action.payload.avatar;
      state.coverImage = action.payload.coverImage;
      state.role = action.payload.role;
      state.licence = action.payload.licence;
      state.visitFees = action.payload.visitFees;
      state.instituteName = action.payload.instituteName;
      state.accessToken = action.payload.accessToken;
    },
    login: (state, action) => {
      state.isLoggedIn = true;
      state.userId = action.payload._id;
      state.userName = action.payload.userName;
      state.email = action.payload.email;
      state.phoneNumber = action.payload.phoneNumber;
      state.firstName = action.payload.firstName;
      state.lastName = action.payload.lastName;
      state.address = action.payload.address;
      state.avatar = action.payload.avatar;
      state.coverImage = action.payload.coverImage;
      state.role = action.payload.role;
      state.licence = action.payload.licence;
      state.visitFees = action.payload.visitFees;
      state.instituteName = action.payload.instituteName;
      state.accessToken = action.payload.accessToken;
    },
    logout: (state) => {
      state.isLoggedIn = false;
      state.userId = '';
      state.userName = '';
      state.email = '';
      state.phoneNumber = 0;
      state.firstName = '';
      state.lastName = '';
      state.address = '';
      state.avatar = '';
      state.coverImage = '';
      state.role = '';
      state.licence = '';
      state.visitFees = 0;
      state.instituteName = '';
      state.accessToken = null;
    }
  }
});

export interface UserRootState {
  user: UserState
}

// Export the action creators generated by createSlice
export const { setUser, login, logout } = userSlice.actions;

// Export the reducer to be included in the store
export default userSlice.reducer;
